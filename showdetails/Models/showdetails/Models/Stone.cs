// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace showdetails.Models
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Stone : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { /* 注释掉不兼容的方法调用 */ }
  public static Stone GetRootAsStone(ByteBuffer _bb) { return GetRootAsStone(_bb, new Stone()); }
  public static Stone GetRootAsStone(ByteBuffer _bb, Stone obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Stone __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public showdetails.Models.Vec3? Position { get { int o = __p.__offset(4); return o != 0 ? (showdetails.Models.Vec3?)(new showdetails.Models.Vec3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<showdetails.Models.Stone> CreateStone(FlatBufferBuilder builder,
      Offset<showdetails.Models.Vec3> positionOffset = default(Offset<showdetails.Models.Vec3>)) {
    builder.StartTable(1);
    Stone.AddPosition(builder, positionOffset);
    return Stone.EndStone(builder);
  }

  public static void StartStone(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<showdetails.Models.Vec3> positionOffset) { builder.AddOffset(0, positionOffset.Value, 0); }
  public static Offset<showdetails.Models.Stone> EndStone(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<showdetails.Models.Stone>(o);
  }
}


static public class StoneVerify
{
  static public bool Verify(/*Google.FlatBuffers.Verifier verifier, uint tablePos*/)
  {
    // 注释掉对 Verifier 的引用
    // 原代码：
    // return verifier.VerifyTableStart(tablePos)
    //   && verifier.VerifyTable(tablePos, 4 /*Position*/, showdetails.Models.Vec3Verify.Verify, false)
    //   && verifier.VerifyTableEnd(tablePos);
    return true;
  }
}

}
