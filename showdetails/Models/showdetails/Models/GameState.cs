// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace showdetails.Models
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct GameState : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { /* 注释掉不兼容的方法调用 */ }
  public static GameState GetRootAsGameState(ByteBuffer _bb) { return GetRootAsGameState(_bb, new GameState()); }
  public static GameState GetRootAsGameState(ByteBuffer _bb, GameState obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  // 注释掉对 Verifier 的引用
  public static bool VerifyGameState(ByteBuffer _bb) { return true; }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public GameState __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ItemCount { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public showdetails.Models.Vec3? TargetPosition { get { int o = __p.__offset(6); return o != 0 ? (showdetails.Models.Vec3?)(new showdetails.Models.Vec3()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool IsTargetInRange { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public double MinRange { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double MaxRange { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public showdetails.Models.Ball? Ball { get { int o = __p.__offset(14); return o != 0 ? (showdetails.Models.Ball?)(new showdetails.Models.Ball()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public showdetails.Models.Stone? Stone { get { int o = __p.__offset(16); return o != 0 ? (showdetails.Models.Stone?)(new showdetails.Models.Stone()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public int StoneCount { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<showdetails.Models.GameState> CreateGameState(FlatBufferBuilder builder,
      int item_count = 0,
      Offset<showdetails.Models.Vec3> target_positionOffset = default(Offset<showdetails.Models.Vec3>),
      bool is_target_in_range = false,
      double min_range = 0.0,
      double max_range = 0.0,
      Offset<showdetails.Models.Ball> ballOffset = default(Offset<showdetails.Models.Ball>),
      Offset<showdetails.Models.Stone> stoneOffset = default(Offset<showdetails.Models.Stone>),
      int stone_count = 0) {
    builder.StartTable(8);
    GameState.AddMaxRange(builder, max_range);
    GameState.AddMinRange(builder, min_range);
    GameState.AddStoneCount(builder, stone_count);
    GameState.AddStone(builder, stoneOffset);
    GameState.AddBall(builder, ballOffset);
    GameState.AddTargetPosition(builder, target_positionOffset);
    GameState.AddItemCount(builder, item_count);
    GameState.AddIsTargetInRange(builder, is_target_in_range);
    return GameState.EndGameState(builder);
  }

  public static void StartGameState(FlatBufferBuilder builder) { builder.StartTable(8); }
  public static void AddItemCount(FlatBufferBuilder builder, int itemCount) { builder.AddInt(0, itemCount, 0); }
  public static void AddTargetPosition(FlatBufferBuilder builder, Offset<showdetails.Models.Vec3> targetPositionOffset) { builder.AddOffset(1, targetPositionOffset.Value, 0); }
  public static void AddIsTargetInRange(FlatBufferBuilder builder, bool isTargetInRange) { builder.AddBool(2, isTargetInRange, false); }
  public static void AddMinRange(FlatBufferBuilder builder, double minRange) { builder.AddDouble(3, minRange, 0.0); }
  public static void AddMaxRange(FlatBufferBuilder builder, double maxRange) { builder.AddDouble(4, maxRange, 0.0); }
  public static void AddBall(FlatBufferBuilder builder, Offset<showdetails.Models.Ball> ballOffset) { builder.AddOffset(5, ballOffset.Value, 0); }
  public static void AddStone(FlatBufferBuilder builder, Offset<showdetails.Models.Stone> stoneOffset) { builder.AddOffset(6, stoneOffset.Value, 0); }
  public static void AddStoneCount(FlatBufferBuilder builder, int stoneCount) { builder.AddInt(7, stoneCount, 0); }
  public static Offset<showdetails.Models.GameState> EndGameState(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<showdetails.Models.GameState>(o);
  }
  public static void FinishGameStateBuffer(FlatBufferBuilder builder, Offset<showdetails.Models.GameState> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedGameStateBuffer(FlatBufferBuilder builder, Offset<showdetails.Models.GameState> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class GameStateVerify
{
  static public bool Verify(/*Google.FlatBuffers.Verifier verifier, uint tablePos*/)
  {
    // 注释掉对 Verifier 的引用
    // 原代码：
    // return verifier.VerifyTableStart(tablePos)
    //   && verifier.VerifyField(tablePos, 4 /*ItemCount*/, 4 /*int*/, 4, false)
    //   && verifier.VerifyTable(tablePos, 6 /*TargetPosition*/, showdetails.Models.Vec3Verify.Verify, false)
    //   && verifier.VerifyField(tablePos, 8 /*IsTargetInRange*/, 1 /*bool*/, 1, false)
    //   && verifier.VerifyField(tablePos, 10 /*MinRange*/, 8 /*double*/, 8, false)
    //   && verifier.VerifyField(tablePos, 12 /*MaxRange*/, 8 /*double*/, 8, false)
    //   && verifier.VerifyTable(tablePos, 14 /*Ball*/, showdetails.Models.BallVerify.Verify, false)
    //   && verifier.VerifyTable(tablePos, 16 /*Stone*/, showdetails.Models.StoneVerify.Verify, false)
    //   && verifier.VerifyField(tablePos, 18 /*StoneCount*/, 4 /*int*/, 4, false)
    //   && verifier.VerifyTableEnd(tablePos);
    return true;
  }
}

}
